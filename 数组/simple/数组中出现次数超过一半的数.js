// 数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。

// 你可以假设数组是非空的，并且给定的数组总是存在多数元素。

// 示例 1:

// 输入: [1, 2, 3, 2, 2, 2, 5, 4, 2]
// 输出: 2

// 限制：

// 1 <= 数组长度 <= 50000

//思路：找众数 摩尔投票法
//设输入数组 nums 的众数为 x ，数组长度为 nn 。

// 推论一： 若记众数的票数为 +1 ，非众数 的票数为−1 ，则一定有所有数字的票数和>0 。

// 推论二： 若数组的前 a 个数字的票数和 = 0 ，则 数组剩余(n−a) 个数字的 票数和一定仍>0 ，即后(n−a) 个数字的众数仍为 x 。

var majorityElement = function(nums){
    let votes =0,count=0,x=0,len=nums.length;
    //votes代表票数 count计数器 x为众数 len 数组长度
    for(let i =0;i<len;i++){//遍历数组
        //如果总票数=0 更新当前数为众数x
        if(votes ===0){
            x= nums[i]
        }
        if(nums[i] === x){ //如果当前数等于众数x 票数+1 否则-1
            votes++
        }else{
            votes--
        }
    }
    //统计该众数的出现的次数
    for(let i =0;i<len;i++){
        if(nums[i] === x){
            count++
        }
    }
    return count>len/2?x:0; //判断如果是众数返回x 否则0
}
